---
# The main format is as follows:
# Each section contains information that will help to configure your
# experiment. Where possible, values that are not supplied will be filled in
# with default values supplied by the given experiment. The author of a
# particular behavior script should also write a config file that will serve as
# a template and possibly be used to provide the default values. If a section
# requires specification of a python object, the formatting should go something
# like this:
# object_name: !!python/object:module.submodule
#              param1: value1
#              param2: value2
#              ...
#              paramn: valuen
# You can refer to a previously defined object using "&some_name" before
# defining the object and "*some_name" when referencing the object

# Experiment description
name: Go No-Go Interruption
description: Runs a Go No-Go Interruption experiment
experimenter:
    name: First Last
    email: &def_email "test@somewhere.com"

# Experiment properties
subject_name: &subject Subject
light_schedule:
    - !!python/tuple ["05:00", "22:00"]
idle_poll_interval: 60.0
debug: false

# Behavior properties
reward_value: 10.0

# Session details
state: !!python/object:pyoperant.states.SessionState
    schedules:
        - !!python/object:pyoperant.states.ResponseScheduler


num_sessions: 1
session_schedule:
    - !!python/tuple ["05:00", "22:00"]
shape: false

# Subject properties
subject: !!python/object:pyoperant.subjects.Subject
    name: *subject

# Panel properties
panel: !!python/object:pyoperant.panels.BasePanel {}

# File paths
experiment_path: "/path/to/data/directory"

# Stimulus conditions
conditions:
    - &rewarded !!python/object:pyoperant.stimuli.StimulusConditionWav
      file_path: "/path/to/rewarded/stimuli"
      response: false
      is_rewarded: true
      is_punished: false
    - &unrewarded !!python/object:pyoperant.stimuli.StimulusConditionWav
      file_path: "/path/to/unrewarded/stimuli"
      response: true
      is_rewarded: false
      is_punished: false

# Block properties
blocks:
    # Block number 1
    - !!python/object:pyoperant.blocks.Block
        conditions:
            # Rewarded stimuli
            - *rewarded
            # Unrewarded stimuli
            - *unrewarded
        weights:
            - 0.2
            - 0.8
        queue: !!python/name:pyoperant.queues.random_queue
        reinforcement: !!python/object:pyoperant.reinf.ContinuousReinforcement {}

block_queue: !!python/name:pyoperant.blocks.BlockHandler
    queue: !!python/name:pyoperant.queues.block_queue

# Log handler setup
# Possible values are stream, file, email
log_handlers:
    # stream's only option is level. Overrides "debug" parameter for logging
    stream:
        level: !!python/name:logging.INFO
    # file takes options of
    # filename: a file under experiment_path
    # level: a python logging level, written as "!!python/name:logging.LEVEL"
    file:
        filename: "experiment.log"
        level: !!python/name:logging.DEBUG
    # email takes options of
    # mailhost: where the email is sent from
    # toaddrs: a list of addresses to send to
    # fromaddr: the address to send from
    # subject: The subject line
    # credentials: not sure
    # secure: not sure
    # level: a python logging level, written as "!!python/name:logging.LEVEL"
    email:
        mailhost: localhost
        toaddrs:
            - *def_email
        fromaddr: "Pyoperant <pyoperant@someemail.com"
        subject: "pyoperant notice"
        credentials: none
        secure: none
        level: !!python/name:logging.ERROR
...
